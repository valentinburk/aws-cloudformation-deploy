Description: >
    Valentin Burkin / Udacity / 2020
    This template deploys a Load Balancer and Autoscaling LaunchConfiguration with
    AutoscalingGroup and Bastion EC2 instance

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    InstanceType:
        Description: AWS Machine instance type
        Type: String
    SSHLocation:
        Description: IP Address of Bastion Administrator machine
        Type: String
    KeyName:
        Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
        Type: AWS::EC2::KeyPair::KeyName
        ConstraintDescription: must be the name of an existing EC2 KeyPair"

Resources:
    # Load balancer
    LBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http on the load balancer
            VpcId:
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            -   IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
            -   Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
            -   Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
            SecurityGroups:
            -   Ref: LBSecurityGroup
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            -   Type: forward
                TargetGroupArn: !Ref "WebAppTargetGroup"
            LoadBalancerArn:
                Ref: WebAppLB
            Port: "80"
            Protocol: HTTP
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            -   Type: forward
                TargetGroupArn: !Ref "WebAppTargetGroup"
            Conditions:
            -   Field: path-pattern
                Values: [/]
            ListenerArn: !Ref "Listener"
            Priority: 1
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 35
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 30
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"

    # WebApp Autoscaling
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install unzip awscli -y
                    apt-get install apache2 -y
                    systemctl start apache2.service
                    cd /var/www/html
                    aws s3 cp s3://udacity-demo-1/udacity.zip .
                    unzip -o udacity.zip
            ImageId: ami-005bdb005fb00e791
            IamInstanceProfile: !Ref IAMRoleS3FullAccessInstanceProfile
            SecurityGroups:
            -   Ref: LBSecurityGroup
            InstanceType: !Ref InstanceType
            BlockDeviceMappings:
            -   DeviceName: "/dev/sdk"
                Ebs:
                    VolumeSize: "10"
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            -   Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
            LaunchConfigurationName:
                Ref: WebAppLaunchConfig
            MaxSize: "5"
            MinSize: "2"
            TargetGroupARNs:
            -   !Ref WebAppTargetGroup

    # S3 access IAM configuration
    IAMRoleS3FullAccess:
        Type: AWS::IAM::Role
        Properties:
            ManagedPolicyArns: 
            -   "arn:aws:iam::aws:policy/AmazonS3FullAccess"
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                -   Effect: Allow
                    Principal:
                        Service:
                        -   ec2.amazonaws.com
                    Action:
                    -   sts:AssumeRole
            Path: "/"
    IAMRoleS3FullAccessInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: "/"
            Roles:
            -   !Ref IAMRoleS3FullAccess

    # Bastion
    BastionInstance:
        Type: AWS::EC2::Instance
        Properties:
            UserData:
                Fn::Base64:
                    Fn::Join: [ "", [ "IPAddress=", !Ref BastionIPAddress ]]
            InstanceType: t2.micro
            ImageId: ami-005bdb005fb00e791
            SecurityGroupIds:
            -   Fn::GetAtt: BastionSecurityGroup.GroupId
            KeyName: !Ref KeyName
            SubnetId:
                Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
    BastionSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow ssh on the Bastion machine
            VpcId:
                Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: !Ref SSHLocation
            SecurityGroupEgress:
            -   IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0
    BastionIPAddress:
        Type: AWS::EC2::EIP
    BastionIPAddressAssociation:
        Type: AWS::EC2::EIPAssociation
        Properties:
            InstanceId: !Ref BastionInstance
            EIP: !Ref BastionIPAddress

Outputs:
    LoadBalancer:
        Description: A reference to the created LoadBalancer
        Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ]]
        Export:
            Name: !Sub ${EnvironmentName}-LB
    Bastion:
        Description: A reference to the created Bastion instance
        Value: !Ref BastionIPAddress
        Export:
            Name: !Sub ${EnvironmentName}-BastionIP